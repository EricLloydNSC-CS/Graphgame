import templates from "graphgame";

initialize!();

/*
We'll be creating a simple side-scrolling scene using DOAs.  The DOA system makes it possible to create many objects in a scene, while only actually using a few "real" objects.

Essentially, this works by having a few "real" objects that change their transform properties (x, y, scale_x, scale_y, etc) to that of "mount points" which are in view of the window. Mount points are essentially just empty objects that have the transform properties.

By doing this, we only have to use a few objects to create an entire scene, and only render and deal with objects that are in view of the window.
*/

//First, we'll create the window/viewport. It will be 20x15. The null is used for adding other things to this object, and and the other two arguments are the x and y scales.
usePrefab!("window", null, 20, 15);

//Next, create the world_object prefab so we can easily create objects. This prefab is the "real" object.
createPrefab!("world_object", {
    //First, we'll want to add the doa behavior to it.
    useBehaviorPrefab!("doa", 0);
    
    //Next, we'll want to give it a renderer.
    useBehaviorPrefab!("square");
    
    //Finally, we'll give it a window follower so that it works correctly with the window.
    useBehaviorPrefab!("window_follower");
});

//Now, we can use our prefab to create a few objects.
usePrefab!("world_object");
usePrefab!("world_object");
usePrefab!("world_object");

//Currently, the DOAs won't actually do anything as there isn't anything in our world. Let's add a few things.

//Mount points take in x, y, scale_x, and scale_y.
usePrefab!("mount_point", null, 0, 1, 0, 3, 1);
usePrefab!("mount_point", null, 0, 1, 3, 3, 1);
usePrefab!("mount_point", null, 0, 25, 0, 5, 1);
usePrefab!("mount_point", null, 0, 25, 2, 3, 1);
usePrefab!("mount_point", null, 0, 26, -2, 3, 1);

//Finally, lets make our window move. We'll move it to the right by .1 each frame, until it hits 20, when we'll move it back to 0 slowly.

//To do this, we can simply extend the window prefab (which we use above), and add a custom behavior to it. First, lets make that behavior.

createBehavior!("window_mover", {
    //First, create a value to store our change in. This will be .1 when moving to the right, and -.1 when moving to the left.
    setVal!("val", .1);
    setMut!("val");
    
    //Next, update it.
    setValAction!("val", {
        //If the x is >= 20 or <= 0, reverse val.
        //Otherwise, keep it the same.
        
        if(getVal!("base.transform.x") > 20 || getVal!("base.transform.x") < 0) {
            state = -val;
        } else {
            state = val;
        }
    });

    //Next, set x to be mutable so that we can change it.
    setMut!("base.transform.x");
    
    //Finally, update x every frame.
    setValAction!("base.transform.x", {
        //Add val to x every frame.
        state = x + getVal!("val");
    });
});

//Next, extend the prefab and add our new behavior to it.
extendPrefab!("window", {
    useBehaviorPrefab!("window_mover");
});